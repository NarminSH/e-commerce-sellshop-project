"""
Django settings for sellshop_project project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path
from django.urls import reverse_lazy

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-sl@)uie6byz3aviy1uvpggv31o-)^d=bb*&je-+k21lrd+i%5g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False if os.environ.get('DEBUG') else True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django_celery_beat',
    'rest_framework.authtoken',
    'corsheaders',
    'rest_framework',
    'logging_middleware',
    'social_django',
    'jet',
    'blog.apps.BlogConfig',
    'users.apps.UsersConfig',
    'product.apps.ProductConfig',
    'core.apps.CoreConfig',
    'static',
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
]

MIDDLEWARE = [
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'sellshop_project.middleware.filter_ip_middleware.FilterIpMiddleware',
    'sellshop_project.middleware.middleware.DjangoLoggingMiddleware'
]


CORS_ALLOW_ALL_ORIGINS = True

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ]
}


AUTHENTICATION_BACKENDS = [
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.facebook.FacebookOAuth2',
    'django.contrib.auth.backends.ModelBackend'
]

SOCIAL_AUTH_FACEBOOK_KEY = '877224066475545'       
SOCIAL_AUTH_FACEBOOK_SECRET = 'de7b4eac39957115f4d96e0a4255e86d'  

SOCIAL_AUTH_FACEBOOK_SCOPE = ['email','user_friends']
SOCIAL_AUTH_FACEBOOK_PROFIL_EXTRA_PARAMS ={
    'fields': 'id,name,email,picture',
}


SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'users.users.pipeline.update_user_social_data',
)


ROOT_URLCONF = 'sellshop_project.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sellshop_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB','db_name'),
        'USER': os.environ.get('POSTGRES_USER','sellshop'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD','sellshop123'),
        'HOST': os.environ.get('POSTGRES_HOST','localhost'),
        'PORT': os.environ.get('POSTGRES_PORT', 5432)
    }
}

LOGIN_URL = reverse_lazy('users-login')
LOGIN_REDIRECT_URL = reverse_lazy('blogs')
LOGOUT_URL = reverse_lazy('logout')
LOGOUT_REDIRECT_URL = reverse_lazy('users-login')

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = "1008329861063-4ntj424d26koql4hp0v7oucjk4tk1sgb.apps.googleusercontent.com"
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'W0FWmwbDnoY4tlByNX3VFHFk'

SOCIAL_AUTH_URL_NAMESPACE = 'social'



# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


CELERY_BROKER_URL = f'redis://{os.environ.get("REDIS_HOST", "localhost")}:{os.environ.get("REDIS_PORT", "6379")}'
CELERY_RESULT_BACKEND = f'redis://{os.environ.get("REDIS_HOST", "localhost")}:{os.environ.get("REDIS_PORT", "6379")}'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Baku'

SITE_ADDRESS = 'http://localhost:8000'

AUTH_USER_MODEL = 'users.CustomUser'

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

LANGUAGE = [
    ('en', ('English')),
    ('az', ("Azerbaijan"))
]
MODELTRANSLATION_DEFAULT_LANGUAGE = 'en'
MODELTRANSLATION_LANGUAGES = ('en', 'az')

ugettext = lambda s: s
LANGUAGES = (
    ('az', ugettext('Azerbaijan')),
    ('en', ugettext('English')),
)

LANGUAGE_CODE = 'en-us'



TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

if DEBUG:
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static'),
    ]
else:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')


MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# email details
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = 'nshivakhanova@gmail.com'
EMAIL_HOST_PASSWORD = 'ijwdxtlqnbjqwtin'





# middleware settings
DEFAULTS = {
    'DEFAULT_FORMAT': True,
    'MESSAGE_FORMAT': "<b><green>{time}</green> <cyan>{message}</cyan></b>"
}


class Settings:
    def __init__(self, settings):
        self.settings = getattr(settings, 'DJANGO_LOGGING_MIDDLEWARE', {})
        self.set_settings()

    def set_settings(self):
        if self.settings == {}:
            self.DEFAULT_FORMAT = DEFAULTS['DEFAULT_FORMAT']
            self.MESSAGE_FORMAT = DEFAULTS['MESSAGE_FORMAT']
        elif 'DEFAULT_FORMAT' not in list(self.settings.keys()):
            self.DEFAULT_FORMAT = DEFAULTS['DEFAULT_FORMAT']
            self.MESSAGE_FORMAT = DEFAULTS['MESSAGE_FORMAT']
        elif not isinstance(self.settings['DEFAULT_FORMAT'], bool):
            self.DEFAULT_FORMAT = DEFAULTS['DEFAULT_FORMAT']
            self.MESSAGE_FORMAT = DEFAULTS['MESSAGE_FORMAT']
        elif 'DEFAULT_FORMAT' in list(self.settings.keys()):
            if not self.settings['DEFAULT_FORMAT'] and 'MESSAGE_FORMAT' in list(self.settings.keys()):
                self.DEFAULT_FORMAT = self.settings['DEFAULT_FORMAT']
                self.MESSAGE_FORMAT = self.settings['MESSAGE_FORMAT']
            elif self.settings['DEFAULT_FORMAT'] and 'MESSAGE_FORMAT' not in list(self.settings.keys()):
                self.DEFAULT_FORMAT = self.settings['DEFAULT_FORMAT']
                self.MESSAGE_FORMAT = DEFAULTS['MESSAGE_FORMAT']
            else:
                self.DEFAULT_FORMAT = self.settings['DEFAULT_FORMAT']
                self.MESSAGE_FORMAT = DEFAULTS['MESSAGE_FORMAT']
        else:
            self.DEFAULT_FORMAT = self.settings['DEFAULT_FORMAT']
            self.MESSAGE_FORMAT = self.settings['MESSAGE_FORMAT']


